"use client";
import React, { useState, useEffect } from "react";
import "/styles/WeightProgressPage.css";
import withAuth from "../components/AuthenticationCheck";
import Image from "next/image";
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  deleteDoc,
  doc,
  Timestamp,
} from "firebase/firestore";
import { db } from "../firebase/firebaseConfig";
import { auth } from "../firebase/firebaseConfig";
import dynamic from "next/dynamic";

const PageTransition = dynamic(() => import("../components/PageTransition"));
const WeightGraph = dynamic(() => import("../components/WeightGraph"), {
  ssr: false,
  loading: () => <p>Loading graph...</p>,
});

const MAX_WEIGHTS = 30; // Maximum number of weights to keep
const INITIAL_DISPLAY_COUNT = 10; // Number of weights to display initially

const WeightTracking: React.FC = () => {
  const [weight, setWeight] = useState<number | "">("");
  const [userId, setUserId] = useState<string>("");
  const [username, setUsername] = useState<string | null>(null); // State for user's name
  const [weights, setWeights] = useState<any[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [displayAll, setDisplayAll] = useState(false); // Toggle for showing all weights

  useEffect(() => {
    const user = auth.currentUser;
    if (user) {
      setUserId(user.uid);
      setUsername(user.displayName || "User"); // Fetch and set the user's name
    } else {
      console.log("No user is logged in");
    }
  }, []);

  useEffect(() => {
    const fetchWeights = async () => {
      if (!userId) return;

      const q = query(collection(db, "weights"), where("userId", "==", userId));
      const querySnapshot = await getDocs(q);

      const data: any[] = [];
      querySnapshot.forEach((doc) => {
        const docData = doc.data();
        data.push({
          id: doc.id,
          weight: docData.weight,
          date: docData.date.toDate(),
        });
      });

      const sortedData = data
        .sort((a, b) => b.date - a.date)
        .slice(0, MAX_WEIGHTS);

      setWeights(sortedData);
    };

    fetchWeights();
  }, [userId]); // Only rerun when `userId` changes

  const handleAddWeight = async () => {
    if (weight === "" || weight <= 0 || weight >= 500) {
      setError("–ù–µ–≤–∞–ª–∏–¥–Ω–æ —Ç–µ–≥–ª–æ");
      return;
    }

    if (!userId) {
      setError("User not logged in.");
      return;
    }

    try {
      const newWeightRef = await addDoc(collection(db, "weights"), {
        userId: userId,
        weight: Number(weight),
        date: Timestamp.now(),
      });

      const newWeight = {
        id: newWeightRef.id,
        weight: Number(weight),
        date: new Date(),
      };

      setWeights((prevWeights) => {
        const updatedWeights = [...prevWeights, newWeight].sort(
          (a, b) => b.date - a.date // Sort by date descending
        );

        if (updatedWeights.length > MAX_WEIGHTS) {
          const excessWeights = updatedWeights.slice(MAX_WEIGHTS);

          excessWeights.forEach(async (entry) => {
            await deleteDoc(doc(db, "weights", entry.id));
          });

          return updatedWeights.slice(0, MAX_WEIGHTS); // Keep only the newest weights
        }

        return updatedWeights;
      });

      setWeight("");
      setError(null);
    } catch (error) {
      console.error("Error adding weight:", error);
      setError("There was an error adding your weight.");
    }
  };

  const displayedWeights = displayAll
    ? weights
    : weights.slice(0, INITIAL_DISPLAY_COUNT);

  // Calculate the highest, lowest, and average weight
  const highestWeight = Math.max(...weights.map((w) => w.weight));
  const lowestWeight = Math.min(...weights.map((w) => w.weight));
  const averageWeight =
    weights.reduce((sum, w) => sum + w.weight, 0) / weights.length;

  const generateMessage = () => {
    const messages: JSX.Element[] = [];
    if (weights.length === 0) {
      messages.push(
        <div key="welcome" className="weight-message weight-message-neutral">
          <span className="icon">üí°</span>
          <p>
            –î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤—ä–≤ –≤–∞—à–µ—Ç–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! –í—Å—è–∫–∞ –≥–æ–ª—è–º–∞ –ø—Ä–æ–º—è–Ω–∞ –∑–∞–ø–æ—á–≤–∞ —Å
            –µ–¥–Ω–∞ –º–∞–ª–∫–∞ —Å—Ç—ä–ø–∫–∞.
          </p>
          <p>
            –ó–∞–ø–∏—à–µ—Ç–µ –ø—ä—Ä–≤–æ—Ç–æ —Å–∏ —Ç–µ–≥–ª–æ, –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ –Ω–µ—â–∞—Ç–∞ –∏ –Ω–µ–∫–∞ –ø–æ—Å—Ç–∏–≥–Ω–µ–º
            —Å—Ç—Ä–∞—Ö–æ—Ç–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞–µ–¥–Ω–æ!
          </p>
        </div>
      );
    } else if (weights.length === 1) {
      messages.push(
        <div
          key="first-entry"
          className="weight-message weight-message-positive"
        >
          <span className="icon">üéâ</span>
          <p>
            –°—Ç—Ä–∞—Ö–æ—Ç–Ω–æ –Ω–∞—á–∞–ª–æ! –ó–∞–ø–∏—Å–∞—Ö—Ç–µ –ø—ä—Ä–≤–æ—Ç–æ —Å–∏ —Ç–µ–≥–ª–æ. –ë—ä–¥–µ—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–∏
            –∏ —Å–ª–µ–¥–µ—Ç–µ –Ω–∞–ø—Ä–µ–¥—ä–∫–∞ —Å–∏.
          </p>
        </div>
      );
    } else {
      const latestWeight = weights[0]?.weight;
      const highestWeight = Math.max(...weights.map((w) => w.weight));
      const lowestWeight = Math.min(...weights.map((w) => w.weight));
      const averageWeight =
        weights.reduce((sum, w) => sum + w.weight, 0) / weights.length;

      // Prioritize significant milestones
      if (latestWeight === highestWeight) {
        messages.push(
          <div key="highest" className="weight-message weight-message-negative">
            <span className="icon">‚ö†Ô∏è</span>
            <p>
              –ü–æ—Å—Ç–∏–≥–Ω–∞—Ö—Ç–µ –Ω–∞–π-–≤–∏—Å–æ–∫–æ—Ç–æ —Å–∏ —Ç–µ–≥–ª–æ –¥–æ—Å–µ–≥–∞. –ú–∏—Å–ª–µ—Ç–µ –∑–∞ —Ç–æ–≤–∞ –∫–∞—Ç–æ –∑–∞
              —Å–≤–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–Ω–∞ —Ç–æ—á–∫–∞, –∑–∞ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ –Ω–∞–ø—Ä–µ–¥ —Å —Ü–µ–ª–∏—Ç–µ —Å–∏!
            </p>
          </div>
        );
      }

      if (latestWeight === lowestWeight) {
        messages.push(
          <div key="lowest" className="weight-message weight-message-positive">
            <span className="icon">üéâ</span>
            <p>–î–æ—Å—Ç–∏–≥–Ω–∞—Ö—Ç–µ –Ω–∞–π-–Ω–∏—Å–∫–æ—Ç–æ —Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω–æ —Ç–µ–≥–ª–æ!</p>
            <p>–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–π—Ç–µ –Ω–∞–ø—Ä–µ–¥, –≤–∏–µ –≥–æ —Å–º–∞–∑–≤–∞—Ç–µ!</p>
          </div>
        );
      }

      // Detect trends: consistent gaining or losing
      if (weights.length >= 3) {
        const [w1, w2, w3] = weights.slice(0, 3).map((w) => w.weight);
        if (w1 > w2 && w2 > w3) {
          messages.push(
            <div
              key="consistent-gain"
              className="weight-message weight-message-negative"
            >
              <span className="icon">üìà</span>
              <p>
                –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–æ–∫–∞—á–≤–∞–Ω–µ. –ê–∫–æ —Ç–æ–≤–∞ —Å—ä–≤–ø–∞–¥–∞ —Å —Ü–µ–ª–∏—Ç–µ –≤–∏,
                –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–π—Ç–µ —Ç–∞–∫–∞! –ê–∫–æ –Ω–µ, –ø–æ–º–∏—Å–ª–µ—Ç–µ –∑–∞ –ø—Ä–µ—Ä–∞–∑–≥–ª–µ–∂–¥–∞–Ω–µ –Ω–∞ –Ω–∞–≤–∏—Ü–∏ —Å–∏.
              </p>
            </div>
          );
        } else if (w1 < w2 && w2 < w3) {
          messages.push(
            <div
              key="consistent-loss"
              className="weight-message weight-message-positive"
            >
              <span className="icon">üìâ</span>
              <p>
                –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞—Ç–µ –¥–∞ –æ—Ç—Å–ª–∞–±–≤–∞—Ç–µ —É–º–µ—Ä–µ–Ω–æ –æ—Ç—Å–ª–∞–±–≤–∞–ª–∏. –£–¥–∏–≤–∏—Ç–µ–ª–µ–Ω
                –Ω–∞–ø—Ä–µ–¥—ä–∫ - –æ—Å—Ç–∞–Ω–µ—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–∏!
              </p>
            </div>
          );
        }
      }

      // Rapid changes: gain or loss
      if (weights.length >= 2) {
        const recentWeights = weights.slice(0, 2);
        const weightDifference =
          recentWeights[0].weight - recentWeights[1].weight;
        const percentageChange =
          (weightDifference / recentWeights[1].weight) * 100;

        if (percentageChange > 3) {
          messages.push(
            <div
              key="rapid-gain"
              className="weight-message weight-message-negative"
            >
              <span className="icon">‚ö†Ô∏è</span>
              <p>
                –£—Å—Ç–∞–Ω–æ–≤–µ–Ω–æ –µ –±—ä—Ä–∑–æ —É–≤–µ–ª–∏—á–∞–≤–∞–Ω–µ –Ω–∞ —Ç–µ–≥–ª–æ—Ç–æ. –†—è–∑–∫–æ—Ç–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –æ–±–µ–∑–ø–æ–∫–æ–∏—Ç–µ–ª–Ω–æ - –∫–æ–Ω—Å—É–ª—Ç–∏—Ä–∞–π—Ç–µ —Å–µ —Å—ä—Å –∑–¥—Ä–∞–≤–µ–Ω
                —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
              </p>
            </div>
          );
        } else if (percentageChange < -3) {
          messages.push(
            <div
              key="rapid-loss"
              className="weight-message weight-message-negative"
            >
              <span className="icon">‚ö†Ô∏è</span>
              <p>
                –£—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞ –±—ä—Ä–∑–∞ –∑–∞–≥—É–±–∞ –Ω–∞ —Ç–µ–≥–ª–æ. –ë—ä–¥–µ—Ç–µ –∑–¥—Ä–∞–≤–∏ –∏ —Å–µ
                –∫–æ–Ω—Å—É–ª—Ç–∏—Ä–∞–π—Ç–µ —Å –ø—Ä–æ—Ñ–µ—Å–∏–æ–Ω–∞–ª–∏—Å—Ç, –∞–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
              </p>
            </div>
          );
        }
      }

      // General progress message
      if (messages.length < 3) {
        messages.push(
          <div key="average" className="weight-message weight-message-neutral">
            <span className="icon">üî¢</span>
            <p>
              –ö–∞—Ç–æ —Å—Ä–µ–¥–Ω–æ–∞—Ä–µ—Ç–º–∏—Ç–∏—á–Ω–æ, —Ç–≤–æ–µ—Ç–æ —Ç–µ–≥–ª–æ –µ {averageWeight.toFixed(2)}{" "}
              –∫–≥. –¢–∏ –ø—Ä–∞–≤–∏—à –ø–æ—Å—Ç–æ—è–Ω–Ω–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å, –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–π —Ç–∞–∫–∞!
            </p>
          </div>
        );
      }
    }

    return messages.slice(0, 3); // Limit to 3 messages
  };

  return (
    <div id="page_WeightProgress">
      <PageTransition>
        <div className="content-wrapper">
          <div className="weight-text-container">
            <Image
              src="/Pics/news.png"
              width={100}
              height={100}
              className="news-image"
              alt="NW-image"
            />
            <p className="greetings">
              –ó–¥—Ä–∞–≤–µ–π, {username}
              <br />
              –¢—É–∫ –º–æ–∂–µ—à –¥–∞ —Å–ª–µ–¥–∏—à
              <br />
              –∫–∏–ª–æ–≥—Ä–∞–º–∏—Ç–µ –∏ –ø—Ä–æ–≥—Ä–µ—Åa —Å–∏
            </p>
            <div className="personalized-message">{generateMessage()}</div>
          </div>
          <div className="weight-container">
            <h1>–ì—Ä–∞—Ñ–∞ –∑–∞ –¢–µ–≥–ª–æ</h1>
            <div className="input-container">
              {error && <p className="error-message">{error}</p>}
              <input
                type="number"
                value={weight}
                onChange={(e) => {
                  const value = e.target.value;
                  const regex = /^\d{0,3}(\.\d{0,3})?$/;

                  if (regex.test(value)) {
                    setWeight(value === "" ? "" : Number(value));
                    setError("");
                  }
                }}
                placeholder="–í—ä–≤–µ–¥–∏ –∫–∏–ª–æ–≥—Ä–∞–º–∏—Ç–µ (–∫–≥)"
                className="weight-input"
                onKeyDown={(e) => {
                  if (e.key === "Enter") {
                    handleAddWeight(); // Trigger the handleAddWeight function when Enter is pressed
                  }
                }}
              />

              <button onClick={handleAddWeight} className="submit-button">
                <span></span>–î–æ–±–∞–≤–∏
              </button>
              <button
                onClick={() => setDisplayAll(!displayAll)}
                className="toggle-button"
              >
                <span></span>
                {displayAll ? "–û–±—Ä–∞—Ç–Ω–æ" : "–†–∞–∑—à–∏—Ä–∏"}
              </button>
            </div>

            <WeightGraph
              dates={displayedWeights
                .map((entry) => entry.date.toLocaleDateString())
                .reverse()} // Reverse the order of dates
              weights={displayedWeights.map((entry) => entry.weight).reverse()} // Reverse the order of weights
            />
            {displayAll && (
              <div className="stats">
                <p>–ù–∞–π-–≤–∏—Å–æ–∫–æ: {highestWeight} –∫–≥</p>
                <p>–ù–∞–π-–Ω–∏—Å–∫–æ: {lowestWeight} –∫–≥</p>
                <p>–°—Ä–µ–¥–Ω–æ: {averageWeight?.toFixed(2)} –∫–≥</p>
              </div>
            )}
          </div>
        </div>
      </PageTransition>
    </div>
  );
};

export default withAuth(WeightTracking);
